/**
@file MazeGeneration.h
@author Rob Thomas
@brief Contains code for the procedural generation of simple 2D mazes. 
*/

/*** INCLUDES: ***/

#include <stdbool.h>

/*** DEFINES: ***/

#define FAULTY_DEQUEUE_RESULT_FAIL -1000

/*** STRUCTS: ***/

/**
@typedef Space
@brief Struct representing a single space in a maze.
@var rightWall True if this space has a wall on its right side. False otherwise.
@var bottomWall True if this space has a wall on its bottom side. False
     otherwise.
@var visited True if this space has been visited by a branch. False otherwise.
*/
typedef struct 
{
	bool rightWall;
	bool bottomWall;
	bool visited;
} Space;

/**
@typedef Maze
@brief Struct representing a rectangular 2D maze.
@var width The width (in spaces) of the maze.
@var height The height (in spaces) of the maze.
@var array An array of spaces representing the maze itself. In array[x][y],
     x gives the row desired and y gives the column desired.
*/
typedef struct 
{
	int width;
	int height;

	Space **array;
} Maze;

/**
@typedef Branch
@brief Struct representing a single branch exploring the maze. At any time, 
       several branches may be exploring the maze concurrently.
@var name The name of the branch. A branch's name is equivalent to the name of 
     the branch that spawned it with a single letter appended which indicated
     which child this is. For instance, if the initial branch is named "A", then
     its first child will be named "AA" and its second child will be named "AB".
     Then, that branch's first child will be named "ABA" and its second child
     will be named "ABB", and so on. The name is purely cosmetic.
@var row The row of the space that this branch is currently in.
@var col The column of the space that this branch is currently in.
@var letterOffset An offset indicating the letter to be appended to this 
     branch's next child branch. A letterOffset of 0 means the next child's name
     will be this branch's name with an 'A' appended, and a letterOffset of 2
     means a 'C' will be appended instead.
*/
typedef struct
{
	char *name;

	int row;
	int col;
	int letterOffset;
} Branch;

/**
@typedef MazeTemplate
@brief A struct that houses settings for how the maze should be generated and
       how likely certain events are.
@var branchGenThreshold An array dictating the likelihood of a new branch being
     generated by an old branch that has just moved to a new space. 
     branchGenThreshold[0] gives the likelihood of one branch being generated.
     branchGenThreshold[1] gives the likelihood of a second branch being 
     generated.
     branchGenThreshold[2] gives the likelihood of a third branch being 
     generated.
     As these represent probabilities, each should be between 0 and 1 
     (inclusive).
@var moveUpMod The probability of any branch to move upwards.
@var moveDownMod The probabily of any branch to move downwards.
@var moveLeftMod The probability of any branch to move to the left.
@var moveRightMod The probability of any branch to the move to the right.
@var universalLoopChance The probability of any branch to create a loop at any
     point where it has moved next to a visited space separated by a wall.
@var terminationLoopChance The probability of a branch that has run out of 
     places to move to create a loop.
@var minLoopDistance The minimum distance between two spaces for a loop to be
     created between those spaces.
*/
typedef struct 
{
	float branchGenThreshold[3];

	float moveUpMod;
	float moveDownMod;
	float moveLeftMod;
	float moveRightMod;
	float universalLoopChance;
	float terminationLoopChance;

	int minLoopDistance;
} MazeTemplate;

/*** FUNCTION PROTOTYPES: ***/